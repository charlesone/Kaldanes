// sorting time comparison for three different string types

/*
    [Valverde Computing copyright notice]

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

    As an exception, the copyright holders of this Library grant you permission to
    (i) compile an Application with the Library, and
    (ii) distribute the Application containing code generated by the Library and
    added to the Application during this compilation process under terms of your choice,
    provided you also meet the terms and conditions of the Application license.

*/

#include <iostream>
#include <chrono>
#include <string.h>
#include <algorithm>
#include "Direct.h"
#include "Symbiont.h"
#include "Sorts.h"

using namespace std;
using namespace std::chrono;

// Only calls distribution(generator) on the average, one time for every four characters.
// Should be faster than calling it on every character, I think
template<typename T, typename U, typename V>
void generateRandomStrings(T tArr[], U uArr[], V vArr[], int sizeArray, int sizeString)
{
    char radixString[] = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    const int radixLen = sizeof(radixString) - 1; // it's null-terminated
    unsigned seed = std::chrono::system_clock::now().time_since_epoch().count();
    std::default_random_engine generator(seed);
    std::uniform_int_distribution<unsigned long long>
    distribution(numeric_limits<unsigned long long>::min(), numeric_limits<unsigned long long>::max());
    int uint64Length = sizeString/8 + 1; // rounding up to having more than enough random bits
    if (sizeString%8 == 0) --uint64Length; // rounding back the even cases to just enough bits
    union byteRand
    {
        uint64_t uint64Rand[128];
        uint8_t  uint8Rand[1024];
        char     charRand[1025];
    };
    byteRand overlay;

    for (int i = 0; i < sizeArray; ++i)
    {
        for (int j = 0; j < uint64Length; ++j)
        {
            overlay.uint64Rand[j] = distribution(generator);
        }
        for (int j = 0; j < sizeString; ++j)
        {
            overlay.uint8Rand[j] = radixString[overlay.uint8Rand[j] % radixLen];
        }
        overlay.charRand[sizeString] = 0;
        tArr[i].reserve(sizeString);
        tArr[i].assign(overlay.charRand);
        uArr[i].reserve(sizeString);
        uArr[i].assign(overlay.charRand);
        vArr[i].reserve(sizeString);
        vArr[i].assign(overlay.charRand);
    }
}

const int string10 = 10;
const int string100 = 100;
const int string1K = 1000;

const int array100 = 100;
const int array10K = 10000;
const int array1M = 1000000;

const std::size_t pmnkSize = 1;

template<typename T>
void doQuick(T arr[], int size, string type)
{
    // Merge sort and print out measured statistics
    compares = 0;
    swaps = 0;
    duration<double, nano> sortTime = duration<double, nano> (0);
    high_resolution_clock::time_point start = high_resolution_clock::now();
    quickSortInvoke(arr, size);
    sortTime = duration_cast<duration<double>> (high_resolution_clock::now() - start);
    cout.precision(3);
    cout << fixed << type << ": " << chrono::duration <double, micro> (sortTime).count() << " microseconds, "
         << swaps << " swaps, " << compares << " compares" << endl;
}

template<typename T>
void doMerge(T arr[], int size, string type)
{
    // Merge sort and print out measured statistics
    compares = 0;
    swaps = 0;
    duration<double, nano> sortTime = duration<double, nano> (0);
    high_resolution_clock::time_point start = high_resolution_clock::now();
    mergeSortInvoke(arr, size);
    sortTime = duration_cast<duration<double>> (high_resolution_clock::now() - start);
    cout.precision(3);
    cout << fixed << type << ": " << chrono::duration <double, micro> (sortTime).count() << " microseconds, "
         << swaps << " swaps, " << compares << " compares" << endl << flush;
}

void doThree10ByteQuick(int size)
{
    // Create three different string type arrays with identical contents and quick sort them
    string strArr[size];
    typedef Direct<char, string10> direct;
    direct dirArr[size];
    typedef Symbiont<string10, pmnkSize> symbiont;
    symbiont symArr[size];
    symArr[0].dropAnchorKInit(symArr, size); // Extra work for Kaldane Symbiont
    generateRandomStrings(strArr, dirArr, symArr, size, string10);
    cout << endl << "Quick Sort " << size << " " << string10 << "-byte strings" << endl;
    doQuick(dirArr, size, "Direct");
    doQuick(symArr, size, "Symbiont");
    doQuick(strArr, size, "std::string");
}

void doThree10ByteMerge(int size)
{
    // Create three different string type arrays with identical contents and merge sort them
    string strArr[size];
    typedef Direct<char, string10> direct;
    direct dirArr[size];
    typedef Symbiont<string10, pmnkSize> symbiont;
    symbiont symArr[size];
    symArr[0].dropAnchorKInit(symArr, size); // Extra work for Kaldane Symbiont
    generateRandomStrings(strArr, dirArr, symArr, size, string10);
    cout << endl << "Merge Sort " << size << " " << string10 << "-byte strings" << endl;
    doMerge(dirArr, size, "Direct");
    doMerge(symArr, size, "Symbiont");
    doMerge(strArr, size, "std::string");
}

void doThree100ByteQuick(int size)
{
    // Create three different string type arrays with identical contents and quick sort them
    string strArr[size];
    typedef Direct<char, string100> direct;
    direct dirArr[size];
    typedef Symbiont<string100, pmnkSize> symbiont;
    symbiont symArr[size];
    symArr[0].dropAnchorKInit(symArr, size); // Extra work for Kaldane Symbiont
    generateRandomStrings(strArr, dirArr, symArr, size, string100);
    cout << endl << "Quick Sort " << size << " " << string100 << "-byte strings" << endl;
    doQuick(dirArr, size, "Direct");
    doQuick(symArr, size, "Symbiont");
    doQuick(strArr, size, "std::string");
}

void doThree100ByteMerge(int size)
{
    // Create three different string type arrays with identical contents and merge sort them
    string strArr[size];
    typedef Direct<char, string100> direct;
    direct dirArr[size];
    typedef Symbiont<string100, pmnkSize> symbiont;
    symbiont symArr[size];
    symArr[0].dropAnchorKInit(symArr, size); // Extra work for Kaldane Symbiont
    generateRandomStrings(strArr, dirArr, symArr, size, string100);
    cout << endl << "Merge Sort " << size << " " << string100 << "-byte strings" << endl;
    doMerge(dirArr, size, "Direct");
    doMerge(symArr, size, "Symbiont");
    doMerge(strArr, size, "std::string");
}

void doThree1KByteQuick(int size)
{
     // Create three different string type arrays with identical contents and quick sort them
   string strArr[size];
    typedef Direct<char, string1K> direct;
    direct dirArr[size];
    typedef Symbiont<string1K, pmnkSize> symbiont;
    symbiont symArr[size];
    symArr[0].dropAnchorKInit(symArr, size); // Extra work for Kaldane Symbiont
    generateRandomStrings(strArr, dirArr, symArr, size, string1K);
    cout << endl << "Quick Sort " << size << " " << string1K << "-byte strings" << endl;
    doQuick(dirArr, size, "Direct");
    doQuick(symArr, size, "Symbiont");
    doQuick(strArr, size, "std::string");
}

void doThree1KByteMerge(int size)
{
    // Create three different string type arrays with identical contents and merge sort them
    string strArr[size];
    typedef Direct<char, string1K> direct;
    direct dirArr[size];
    typedef Symbiont<string1K, pmnkSize> symbiont;
    symbiont symArr[size];
    symArr[0].dropAnchorKInit(symArr, size); // Extra work for Kaldane Symbiont
    generateRandomStrings(strArr, dirArr, symArr, size, string1K);
    cout << endl << "Merge Sort " << size << " " << string1K << "-byte strings" << endl;
    doMerge(dirArr, size, "Direct");
    doMerge(symArr, size, "Symbiont");
    doMerge(strArr, size, "std::string");
}

int main()
{
    cout << endl << endl << "Three different string types, identical in content and" << endl
         << "sorting logic, but not in timings." << endl << endl
         << "Note that the number of swaps and compares for identical arrays," << endl
         << "   using the identical code: these statistics should be identical." << endl << endl
         << "Remember to set the C++11 switch in the IDE or compiler!" << endl << endl
         << "Remember to use release builds if you are analyzing performance," << endl
         << "otherwise Symbionts will be very slow!" << endl << endl
         << "Remember to set the \"ulimit -s\" soft and hard stack limits to unlimited," <<endl
         << "otherwise it can die!]" << endl << endl;
    try // so you can see the exception names in release code execution
    {
        doThree10ByteQuick(array100);
        doThree10ByteMerge(array100);
        doThree100ByteQuick(array100);
        doThree100ByteMerge(array100);
        doThree1KByteQuick(array100);
        doThree1KByteMerge(array100);
        doThree10ByteQuick(array10K);
        doThree10ByteMerge(array10K);
        doThree100ByteQuick(array10K);
        doThree100ByteMerge(array10K);
        doThree1KByteQuick(array10K);
        doThree1KByteMerge(array10K);
        doThree10ByteQuick(array1M);
        cout << endl << endl << "warning: the std:string merge sorts of 1 million"
             << " records take 6400 times longer!"
             << endl << "(30 minutes or so on my i5-3570 CPU)" << endl << endl;
        doThree10ByteMerge(array1M);
        doThree100ByteQuick(array1M);
        doThree100ByteMerge(array1M);
        doThree1KByteQuick(array1M);
        doThree1KByteMerge(array1M);
    }
    catch (...)
    {
        std::exception_ptr p = std::current_exception();
        cerr << "Exception: "
             << (p ?
                 p.__cxa_exception_type()->name() :
                 "Anonymous")
             << endl;
    }
    return 0;
}
