// sorting time comparison for three different string types

/*
    [Valverde Computing copyright notice]

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

    As an exception, the copyright holders of this Library grant you permission to
    (i) compile an Application with the Library, and
    (ii) distribute the Application containing code generated by the Library and
    added to the Application during this compilation process under terms of your choice,
    provided you also meet the terms and conditions of the Application license.

  Caveat: these are single-threaded sorting comparisons. Multi-threading,
  distribution, and best sorting algorithm are a separate exercise. Having the
  fastest strings on the fastest containers makes for the fastest single threaded
  sorting, independent of the algorithm, distribution and the parallelization. Slow
  components are not worthy of fast algorithms and excellent distributed
  parallelization.

  SortDemo is a program in the Kaldanes GitHub code base:
  https://github.com/charlesone/Kaldanes

  All files concerned are located in there and can be built by the “make all”
  command (including the header files Direct.h, Symbiont.h, Head.h, and Sorts.h).

  SortDemo is a C++11 Linux console program churning out performance output
  statistics line-by-line to the console. It does performance analysis using the
  precision nanosecond clock support from C++11 on Linux. SortDemo has not yet
  been run on Windows.

  Four types of 8-byte strings are tested against the same template quick sort
  functions, and next plot, merge sort: (1) std::string class objects are provided
  by C++ libraries and have the ability to be shared with copy-on-write support for
  threading, so moving them is by pointer, (2) Direct template class strings, which
  move as a single element during sorting, (3) Symbiont template class strings,
  which are stored in a block with a head and a body, such that during sorting the
  heads move and the bodies stay in place, and (4) Head template class strings
  which have their heads stored in a separate array, and which declare a Direct
  array internally to store the bodies which don’t move.

  A generically interesting thing is how random strings are generated for the
  SortDemo program. The number of calls to the random bits generation is reduced
  by an average of four across different string lengths. This was done by
  generating them 64 bits wide at a time into a char overlay. No comparisons were
  done, but it is mighty fast.

  Whereas the SortBench program can take days to execute a run of benchmark
  tests, SortDemo executes in much less time. It gives a warning when the
  std::string merge sort tests for a million strings are about to run (they take
  a half-hour each), and it is thought that most users will get the picture and
  hit ctrl-c at that point. Unlike SortBench, which generates new random strings
  for each test, SortDemo copies the identical set of random strings into all
  four string data structures, for apples to apples comparison. The number of
  compares and swaps taken by the quick sort and merge sort are measured, and
  these must be the same across all four string classes for the same number of
  same length strings, so compares and swaps are printed out as well.

*/

#define __STDC_WANT_LIB_EXT1__ 1
#include <iostream>
#include <random>
#include <chrono>
#include <string.h>
#include <algorithm>
#include <climits>
#include "Direct.h"
#include "Symbiont.h"
#include "Head.h"

static const bool debugTrace = false;

#include "Sorts.h"

using namespace std;
using namespace std::chrono;

// Only calls distribution(generator) on the average, one time for every four characters.
// Should be faster than calling it on every character, I think
template<typename T, typename U, typename V, typename W>
void generateRandomStrings(T tArr[], U uArr[], V vArr[], W wArr, int sizeArray, int sizeString)
{
    char radixString[] = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    const int radixLen = sizeof(radixString) - 1; // it's null-terminated
    unsigned seed = std::chrono::system_clock::now().time_since_epoch().count();
    std::default_random_engine generator(seed);
    std::uniform_int_distribution<unsigned long long>
    distribution(numeric_limits<unsigned long long>::min(), numeric_limits<unsigned long long>::max());
    int uint64Length = sizeString/8 + 1; // rounding up to having more than enough random bits
    if (sizeString%8 == 0) --uint64Length; // rounding back the even cases to just enough bits
    union byteRand
    {
        uint64_t uint64Rand[128];
        uint8_t  uint8Rand[1024];
        char     charRand[1025];
    };
    byteRand overlay;

    // This loop should create four identical string arrays of different types
    for (int i = 0; i < sizeArray; ++i)
    {
        for (int j = 0; j < uint64Length; ++j)
        {
            overlay.uint64Rand[j] = distribution(generator);
        }
        for (int j = 0; j < sizeString; ++j)
        {
            overlay.uint8Rand[j] = radixString[overlay.uint8Rand[j] % radixLen];
        }
        overlay.charRand[sizeString] = 0;
        tArr[i].reserve(sizeString);
        tArr[i].assign(overlay.charRand);
        uArr[i].reserve(sizeString);
        uArr[i].assign(overlay.charRand);
        vArr[i].reserve(sizeString);
        vArr[i].assign(overlay.charRand);
        wArr[i].reserve(sizeString);
        wArr[i].assign(overlay.charRand);
    }
}

const int string10 = 10;
const int string100 = 100;
const int string1K = 1000;

const int array100 = 100;
const int array10K = 10000;
const int array1M = 1000000;

template<typename T>
void doQuick(T arr[], int size, string type)
{
    // Merge sort and print out measured statistics
    compares = 0;
    swaps = 0;
    duration<double, nano> sortTime = duration<double, nano> (0);
    high_resolution_clock::time_point start = high_resolution_clock::now();
    quickSortInvoke(arr, size);
    sortTime = duration_cast<duration<double>> (high_resolution_clock::now() - start);
    cout.precision(3);
    cout << fixed << type << ": " << chrono::duration <double, micro> (sortTime).count() << " microseconds, "
         << swaps << " swaps, " << compares << " compares" << endl;
}

template<typename T>
void doMerge(T arr[], int size, string type)
{
    // Merge sort and print out measured statistics
    compares = 0;
    swaps = 0;
    duration<double, nano> sortTime = duration<double, nano> (0);
    high_resolution_clock::time_point start = high_resolution_clock::now();
    mergeSortInvoke(arr, size);
    sortTime = duration_cast<duration<double>> (high_resolution_clock::now() - start);
    cout.precision(3);
    cout << fixed << type << ": " << chrono::duration <double, micro> (sortTime).count() << " microseconds, "
         << swaps << " swaps, " << compares << " compares" << endl << flush;
}

void doFour10ByteQuick(int size)
{
    // Create three different string type arrays with identical contents and quick sort them
    Direct<char, string10> dirArr[size];

    Symbiont<string10> symArr[size];
    symArr[0].dropAnchorKInit(symArr, size); // Extra work for Kaldane Symbiont

    typedef Head<string10> head;
    head headArr[size];
    head::tail tailArr[size];
    headArr[0].dropAnchorKInit(headArr, tailArr, size); // Extra work for Kaldane Head and Direct tail

    string strArr[size];

    generateRandomStrings(dirArr, symArr, headArr, strArr, size, string10);
    cout << endl << "Quick Sort " << size << " " << string10 << "-byte strings" << endl;
    doQuick(dirArr, size, "Direct");
    doQuick(symArr, size, "Symbiont");
    doQuick(headArr, size, "Head");
    doQuick(strArr, size, "std::string");
}

void doFour10ByteMerge(int size)
{
    // Create three different string type arrays with identical contents and quick sort them
    Direct<char, string10> dirArr[size];

    Symbiont<string10> symArr[size];
    symArr[0].dropAnchorKInit(symArr, size); // Extra work for Kaldane Symbiont

    typedef Head<string10> head;
    head headArr[size];
    head::tail tailArr[size];
    headArr[0].dropAnchorKInit(headArr, tailArr, size); // Extra work for Kaldane Head and Direct tail

    string strArr[size];

    generateRandomStrings(dirArr, symArr, headArr, strArr, size, string10);
    cout << endl << "Merge Sort " << size << " " << string10 << "-byte strings" << endl;
    doMerge(dirArr, size, "Direct");
    doMerge(symArr, size, "Symbiont");
    doMerge(headArr, size, "Head");
    doMerge(strArr, size, "std::string");
}

void doFour100ByteQuick(int size)
{
    // Create three different string type arrays with identical contents and quick sort them
    Direct<char, string100> dirArr[size];

    Symbiont<string100> symArr[size];
    symArr[0].dropAnchorKInit(symArr, size); // Extra work for Kaldane Symbiont

    typedef Head<string100> head;
    head headArr[size];
    head::tail tailArr[size];
    headArr[0].dropAnchorKInit(headArr, tailArr, size); // Extra work for Kaldane Head and Direct tail

    string strArr[size];

    generateRandomStrings(dirArr, symArr, headArr, strArr, size, string100);
    cout << endl << "Quick Sort " << size << " " << string100 << "-byte strings" << endl;
    doQuick(dirArr, size, "Direct");
    doQuick(symArr, size, "Symbiont");
    doQuick(headArr, size, "Head");
    doQuick(strArr, size, "std::string");
}

void doFour100ByteMerge(int size)
{
    // Create three different string type arrays with identical contents and quick sort them
    Direct<char, string100> dirArr[size];

    Symbiont<string100> symArr[size];
    symArr[0].dropAnchorKInit(symArr, size); // Extra work for Kaldane Symbiont

    typedef Head<string100> head;
    head headArr[size];
    head::tail tailArr[size];
    headArr[0].dropAnchorKInit(headArr, tailArr, size); // Extra work for Kaldane Head and Direct tail

    string strArr[size];

    generateRandomStrings(dirArr, symArr, headArr, strArr, size, string100);
    cout << endl << "Merge Sort " << size << " " << string100 << "-byte strings" << endl;
    doMerge(dirArr, size, "Direct");
    doMerge(symArr, size, "Symbiont");
    doMerge(headArr, size, "Head");
    doMerge(strArr, size, "std::string");
}

void doFour1KByteQuick(int size)
{
    // Create three different string type arrays with identical contents and quick sort them
    Direct<char, string1K> dirArr[size];

    Symbiont<string1K> symArr[size];
    symArr[0].dropAnchorKInit(symArr, size); // Extra work for Kaldane Symbiont

    typedef Head<string1K> head;
    head headArr[size];
    head::tail tailArr[size];
    headArr[0].dropAnchorKInit(headArr, tailArr, size); // Extra work for Kaldane Head and Direct tail

    string strArr[size];

    generateRandomStrings(dirArr, symArr, headArr, strArr, size, string1K);
    cout << endl << "Quick Sort " << size << " " << string1K << "-byte strings" << endl;
    doQuick(dirArr, size, "Direct");
    doQuick(symArr, size, "Symbiont");
    doQuick(headArr, size, "Head");
    doQuick(strArr, size, "std::string");
}

void doFour1KByteMerge(int size)
{
    // Create three different string type arrays with identical contents and quick sort them
    Direct<char, string1K> dirArr[size];

    Symbiont<string1K> symArr[size];
    symArr[0].dropAnchorKInit(symArr, size); // Extra work for Kaldane Symbiont

    typedef Head<string1K> head;
    head headArr[size];
    head::tail tailArr[size];
    headArr[0].dropAnchorKInit(headArr, tailArr, size); // Extra work for Kaldane Head and Direct tail

    string strArr[size];

    generateRandomStrings(dirArr, symArr, headArr, strArr, size, string1K);
    cout << endl << "Merge Sort " << size << " " << string1K << "-byte strings" << endl;
    doMerge(dirArr, size, "Direct");
    doMerge(symArr, size, "Symbiont");
    doMerge(headArr, size, "Head");
    doMerge(strArr, size, "std::string");
}

int main()
{
    cout << endl << endl << "Three different string types, identical in content and" << endl
         << "sorting logic, but not in timings." << endl << endl
         << "[Note that the number of swaps and compares for identical arrays," << endl
         << "   using the identical code: these statistics should be identical." << endl << endl
         << " Remember to set the C++11 switch in the IDE or compiler!" << endl << endl
         << " Remember to use release builds if you are analyzing performance," << endl
         << "   otherwise Symbionts will be very slow!" << endl << endl
         << " Remember to set the \"ulimit -s\" soft and hard stack limits to unlimited," <<endl
         << "   otherwise it can die!]" << endl << endl;
    try // so you can see the exception names in release code execution
    {
        doFour10ByteQuick(array100);
        doFour10ByteMerge(array100);
        doFour100ByteQuick(array100);
        doFour100ByteMerge(array100);
        doFour1KByteQuick(array100);
        doFour1KByteMerge(array100);
        doFour10ByteQuick(array10K);
        doFour10ByteMerge(array10K);
        doFour100ByteQuick(array10K);
        doFour100ByteMerge(array10K);
        doFour1KByteQuick(array10K);
        doFour1KByteMerge(array10K);
        doFour10ByteQuick(array1M);
        cout << endl << endl << "warning: the std::string merge sorts of 1 million"
             << " records can take 6740 times longer!"
             << endl << "(30 minutes or so on my i5-3570 CPU)" << endl << endl;
        doFour10ByteMerge(array1M);
        doFour100ByteQuick(array1M);
        doFour100ByteMerge(array1M);
        doFour1KByteQuick(array1M);
        doFour1KByteMerge(array1M);
    }
    catch (...)
    {
        std::exception_ptr p = std::current_exception();
        cerr << "Exception: "
             << (p ?
                 p.__cxa_exception_type()->name() :
                 "Anonymous")
             << endl;
    }
    return 0;
}
